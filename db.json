{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500408856000},{"_id":"source/.DS_Store","hash":"076d3cd069079b9042426c9dcce60a193f7b8206","modified":1607530847657},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1500408856000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1500408856000},{"_id":"themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1500408856000},{"_id":"source/_posts/.DS_Store","hash":"0b611981cc0e5609808685479f7acfb4c3e32875","modified":1607530842281},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1500408856000},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1500408856000},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1500408856000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1500408856000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1500408856000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1500408856000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1500408856000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1500408856000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1500408856000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1500408856000},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1500408856000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1500408856000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1500408856000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1500408856000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1500408856000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1500408856000},{"_id":"source/about/index.md","hash":"900b72df10ceb5337e4be7bbb51d077a2b901ba4","modified":1607486765841},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1500408856000},{"_id":"source/_posts/JWT.md","hash":"d1c8ec04f0774009da90889b4c70380e73918064","modified":1607531406006},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1500408856000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1500408856000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1500408856000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1500408856000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1500408856000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1500408856000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1500408856000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1500408856000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1500408856000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1500408856000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1500408856000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1500408856000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1500408856000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1500408856000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1500408856000},{"_id":"source/_posts/JWT/image-20201209195709567.png","hash":"55d134248d581d35aca30f07144a32ff5a0beb7a","modified":1607515029571},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1500408856000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1500408856000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1500408856000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1500408856000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1500408856000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1500408856000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1500408856000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500408856000},{"_id":"source/_posts/JWT/image-20201209195520846.png","hash":"a777f53347fd7544ac9e811f8bd8fed1dd178951","modified":1607514920847},{"_id":"source/_posts/JWT/image-20201209195746076.png","hash":"4d75388e92cd5af4c024003dc0f87b675beb6d2f","modified":1607515066077},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1500408856000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1500408856000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1500408856000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1500408856000},{"_id":"public/404.html","hash":"0320544bec4df64d68f1f6109bb8b9f460c123af","modified":1607531457288},{"_id":"public/archives/index.html","hash":"baad069503ae205f818cf7e2a9fbd6d3e0a90015","modified":1607531457288},{"_id":"public/tags/index.html","hash":"d938b59b8490cf8d5ad92dc85b01bdf1f3866c69","modified":1607531457289},{"_id":"public/i_dont_wanna_use_default_archives/2020/index.html","hash":"b90fa1025cd3153f9a4e60b4236694ee00d634e8","modified":1607531457289},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"af82d5bb9c56e96b3cddac1c3f69eecf5cc80c0d","modified":1607531457289},{"_id":"public/i_dont_wanna_use_default_archives/2020/12/index.html","hash":"e46ae2dba859c1e3ff661c232cc13280ddc47657","modified":1607531457289},{"_id":"public/tags/SSO/index.html","hash":"7005f25604e76ab058774d849117dfafe5d6bae0","modified":1607531457289},{"_id":"public/tags/微信小程序/index.html","hash":"ae0c93260fb831c36a77883688df4ae766d1b9a9","modified":1607531457289},{"_id":"public/2020/12/10/JWT/index.html","hash":"a1e406283e84685c156327f642297c4b260967b0","modified":1607531457290},{"_id":"public/about/index.html","hash":"89bdbd9dae3b915ca44f3d06e2acd70df8abec73","modified":1607531457290},{"_id":"public/index.html","hash":"b3ed929642f397d13065e16d0dbff8729511af24","modified":1607531457290},{"_id":"public/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1607531457290},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1607531457302},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1607531457302},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1607531457303},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1607531457303},{"_id":"public/2020/12/10/JWT/image-20201209195709567.png","hash":"55d134248d581d35aca30f07144a32ff5a0beb7a","modified":1607531457303},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1607531457303},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1607531457836},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1607531457837},{"_id":"public/2020/12/10/JWT/image-20201209195520846.png","hash":"a777f53347fd7544ac9e811f8bd8fed1dd178951","modified":1607531457839},{"_id":"public/2020/12/10/JWT/image-20201209195746076.png","hash":"4d75388e92cd5af4c024003dc0f87b675beb6d2f","modified":1607531457839},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1607531457846},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1607531457846},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1607531457846},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1607531457846},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1607531457846},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1607531457846},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1607531457847},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1607531457848},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1607531457848},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1607531457849},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1607531457849},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1607531457849},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1607531457850},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1607531457850},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1607531457865},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1607531457866},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1607531457866},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1607531457867},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1607531457886}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2020-12-08T02:25:27.900Z","updated":"2017-07-18T20:14:16.000Z","path":"404.html","title":"","comments":1,"_id":"ckihmq1w30000sy5nub7lzj0n","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2020-12-08T02:25:27.888Z","updated":"2017-07-18T20:14:16.000Z","path":"archives/index.html","comments":1,"_id":"ckihmq1wl0001sy5nojti5ipz","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2020-12-08T02:25:27.891Z","updated":"2017-07-18T20:14:16.000Z","path":"tags/index.html","comments":1,"_id":"ckihmq1wm0002sy5nw3tx93j2","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2020-12-09T04:06:05.841Z","path":"about/index.html","_id":"ckihmq1x90003sy5nbx72zax8","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"}],"Post":[{"layout":"post","title":"JWT深入讲解与Java项目实战（附源码)","date":"2020-12-10T04:00:00.000Z","author":"佘黎明","_content":"\n## 一、JWT是什么\n\nJWT全称Json Web Token，它是一个开放的标准，它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。 由于此信息是经过数字签名的，因此可以被验证和信任。\n\n这是官网（https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。\n\n## 二、JWT产生的原因\n\n### 传统的session认证：\n\n我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。\n\n传统的Session认证有一个明显的弊端，就是服务端需要存储所有用户的登录信息，这样当用户量非常大的时候服务端的压力就会很大（当然也有一系列的分布式session的方案）。所以就有一种基于token的鉴权机制被发明：\n\n### 基于token的鉴权机制：\n\n首先用户向服务器发送用户名密码的鉴权信息，服务器根据JWT的规则生成一个token，这个token包含用户的信息和签名的信息，用户拿到这个token保存在本地，以后发请求的时候都带上这个token，服务端根据token可以验证token的合法性并解析出用户的信息，这样就可以识别出是哪个用户了。\n\n那么这个token怎么被生成呢？\n\n## 三、JWT的结构\n\nJWT分为三个部分：header、playload、signature。\n\n#### header：头部\n\n头部一般都是固定两个字段：\n\ntyp：声明类型，一般JWT\n\nalg：声明加密算法，一般使用HMAC SHA256\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n然后将这个Json字符串进行base64编码（这种加密是对称的，可以直接进行解密）构成第一部分:\n\n可以在网站上在线加密：https://tool.oschina.net/encrypt?type=3\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n#### playload：存放有效信息的地方\n\n**1、标准中注册的声明 (建议但不强制使用) ：**\n\n`iss`: jwt签发者\n\n`sub`: jwt所面向的用户\n\n`aud`: 接收jwt的一方\n\n`exp`: jwt的过期时间，这个过期时间必须要大于签发时间\n\n`nbf`: 定义在什么时间之前，该jwt都是不可用的.\n\n`iat`: jwt的签发时间\n\n`jti`: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n**2、公共的声明 ：**\n\n公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。\n\n**3、私有的声明 ：**\n\n私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n然后将其进行base64加密，得到Jwt的第二部分:\n\n```\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n```\n\n#### signature：签名信息\n\n这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密\n\n最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt:\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n## 四、Java实现JWT\n\n基于以上原理，我们调用一些jdk自带的包，就可以基于以上规则生成JWT的token。\n\n```java\npackage com.mj.time.util;\n\nimport org.apache.tomcat.util.codec.binary.Base64;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Test {\n    public static String Hmacsha256(String secret, String message) throws NoSuchAlgorithmException, InvalidKeyException {\n        Mac hmac_sha256 = Mac.getInstance(\"HMacSHA256\");\n        SecretKeySpec key = new SecretKeySpec(secret.getBytes(), \"HMacSHA256\");\n        hmac_sha256.init(key);\n        byte[] buff = hmac_sha256.doFinal(message.getBytes());\n        return Base64.encodeBase64URLSafeString(buff);\n    }\n\n    public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException {\n        String secret = \"secret123\";\n        String header = \"{\\\"type\\\":\\\"JWT\\\",\\\"alg\\\":\\\"HS256\\\"}\";\n        String claim = \"{\\\"sub\\\": \\\"1234567890\\\",\\\"name\\\": \\\"John Doe\\\",\\\"iat\\\":1516239022}\";\n\n        String base64Header = Base64.encodeBase64URLSafeString(header.getBytes());\n        String base64Claim = Base64.encodeBase64URLSafeString(claim.getBytes());\n        String signature = Hmacsha256(secret, base64Header + \".\" + base64Claim);\n\n        String jwt = base64Header + \".\" + base64Claim  + \".\" + signature;\n        System.out.println(jwt);\n    }\n}\n```\n\n明显这样生成token非常麻烦，很容器出错，所以就有一系列的第三方库支持，各种语言都有。可以看官网上列的：https://jwt.io/#libraries-io\n\n## 五、开源库 jjwt 实现 JWT\n\njjwt是目前使用比较多，支持加密算法比较多的Java库。github有7000+star。比官方的库java-jwt的3000+star多了一倍多。所以我们使用jjwt作为我们的例子：\n\n源码的github地址：https://github.com/jwtk/jjwt\n\n### 1、基本使用\n\n**1、引入pom依赖**\n\n```xml\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-api</artifactId>\n    <version>0.11.2</version>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-impl</artifactId>\n    <version>0.11.2</version>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-jackson</artifactId>\n    <version>0.11.2</version>\n    <scope>runtime</scope>\n</dependency>\n```\n\n**2、生成JWTtoken**\n\n```java\nKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256);\nString jws = Jwts.builder().setSubject(\"Joe\").signWith(key).compact();\n```\n\n执行后生成的jws为：\n\n`eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.jObJ_3Y_mXHg2vlyvYQQH3RRZlwZvtrvoZnKts3Aq58`\n\n哈哈，只要两行代码，创建一个token。这个token使用HMAC-SHA-256进行签名，并设定了标准中注册的声明`sub`的值为`Joe`\n\n**3、校验token及获取内容**\n\n```java\ntry{\n\t\tString subject = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jws).getBody().getSubject();\n  \t//token合法，进行后续操作\n} catch (JwtException e) {\n    //token不可信\n}\n```\n\n如果传入的token是合法的，subject就可以拿到之前放入的`Joe`。如果token被修改或者失效，就会抛出JwtException。\n\n### 2、签名算法及密钥介绍\n\n在介绍jjwt详细使用之前，我们先介绍一下和jwt相关的签名算法和密钥，了解它们对正确创建jwt至关重要。\n\nJWT规范标识了12种标准签名算法-3种密钥算法和9种非对称密钥算法：\n\n- `HS256`: HMAC using SHA-256\n- `HS384`: HMAC using SHA-384\n- `HS512`: HMAC using SHA-512\n- `ES256`: ECDSA using P-256 and SHA-256\n- `ES384`: ECDSA using P-384 and SHA-384\n- `ES512`: ECDSA using P-521 and SHA-512\n- `RS256`: RSASSA-PKCS-v1_5 using SHA-256\n- `RS384`: RSASSA-PKCS-v1_5 using SHA-384\n- `RS512`: RSASSA-PKCS-v1_5 using SHA-512\n- `PS256`: RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n- `PS384`: RSASSA-PSS using SHA-384 and MGF1 with SHA-384\n- `PS512`: RSASSA-PSS using SHA-512 and MGF1 with SHA-512\n\n这些算法其实对我们程序员来说并不重要，我们只要选择合适的算法即可。但是我们需要注意一下密钥的选择。JWT规范中要求必须使用对于所选算法足够强的密钥。所以jjwt还将强制你为选择的算法使用足够强大的密钥。 如果为给定算法提供弱密钥，JJWT将拒绝它并抛出异常。\n\n当然jjwt为了让你能不需要了解算法就可以生成合法的密钥，jjwt提供了工具类`io.jsonwebtoken.security.Keys`。我们可以使用这个工具类生成对应算法的正确最小长度的安全随机密钥，然后保存起来，后面就可以当作加密的密钥了。\n\n```java\nSecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); //or HS384 or HS512\nString secretString = Encoders.BASE64.encode(key.getEncoded());\n```\n\n还支持非对称加密的公私钥生成：\n\n```java\nKeyPair keyPair = Keys.keyPairFor(SignatureAlgorithm.RS256); \n//or RS384, RS512, PS256, PS384, PS512, ES256, ES384, ES512\nkeyPair.getPrivate()//私钥\nkeyPair.getPublic()//公钥\n```\n\n可以使用私钥创建一个JWS，并使用公钥来解析/验证JWS。\n\n### 3、详细使用\n\n创建一个JWS分为以下4个步骤：\n\n1、使用Jwts.builder（）方法创建JwtBuilder实例。\n\n2、调用JwtBuilder方法以根据需要添加标头参数和声明。\n\n3、指定要用于对JWT签名的SecretKey或非对称PrivateKey。 \n\n4、最后，调用compact（）方法进行压缩和签名，生成最终的jws。\n\n```java\nString jws = Jwts.builder() // (1)\n    .setSubject(\"Bob\")      // (2) \n    .signWith(key)          // (3)\n    .compact();             // (4)\n```\n\n下面针对每一个可以扩展的点进行详细说明：\n\n#### Header Parameters\n\nJWT的header提供内容、格式、加密算法的元数据，如果想增加header的数据，可以调用`JwtBuilder` 的`setHeaderParam`方法一次或多次来添加Header：\n\n```java\nString jws = Jwts.builder()\n    .setHeaderParam(\"kid\", \"myKeyId\")\n    .setHeaderParam(\"\",\"\")\n    // ... etc ...\n```\n\n#### Claims\n\nClaims是JWT的主体，并包含JWT创建者希望提供给JWT接收者的信息。\n\nJWT提供了一些标准的Claims：jjwt都提供了标准的方法设置：\n\n- `setIssuer`: sets the [`iss` (Issuer) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.1)\n- `setSubject`: sets the [`sub` (Subject) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.2)\n- `setAudience`: sets the [`aud` (Audience) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.3)\n- `setExpiration`: sets the [`exp` (Expiration Time) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.4)\n- `setNotBefore`: sets the [`nbf` (Not Before) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.5)\n- `setIssuedAt`: sets the [`iat` (Issued At) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.6)\n- `setId`: sets the [`jti` (JWT ID) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.7)\n\n```java\nString jws = Jwts.builder()\n    .setIssuer(\"me\")\n    .setSubject(\"Bob\")\n    .setAudience(\"you\")\n    .setExpiration(expiration) //a java.util.Date\n    .setNotBefore(notBefore) //a java.util.Date \n    .setIssuedAt(new Date()) // for example, now\n    .setId(UUID.randomUUID()) //just an example id\n    /// ... etc ...\n```\n\n使用自定义的Claims：\n\n```java\nString jws = Jwts.builder()\n    .claim(\"hello\", \"world\")\n    // ... etc ...\n```\n\n#### Signing Key\n\n建议使用 `JwtBuilder`的`signWith`方法设置密钥，因为当你的密钥长度不满足算法的要求的时候，jjwt会自动给你改成对密钥长度要求低的加密算法。并且该方法还会给你设置header中的加密算法。\n\n```java\nString secretString = \"XXXXXXXXXX\";\nSecretKey secretKey = Keys.hmacShaKeyFor(secretString.getBytes(StandardCharsets.UTF_8));\nString jws = Jwts.builder()\n\n   .signWith(secretKey) // <---\n   .compact();\n```\n\n#### 解析JWS\n\n```java\nJws<Claims> jws;\n\ntry {\n    jws = Jwts.parserBuilder()  // (1)\n    .setSigningKey(key)         // (2)\n    .build()                    // (3)\n    .parseClaimsJws(jwsString); // (4)\n    \n    // we can safely trust the JWT\n     \n} catch (JwtException ex) {       // (5)\n    \n    // we *cannot* use the JWT as intended by its creator\n}\n```\n\n\n\n## 六、Springboot项目实战源码\n\n项目实战就是将第二节中的“基于token的鉴权机制”，使用Java代码实现。\n\n#### 1、封装工具类\n\n封装JwtTokenUtils，主要包括生成token、校验token和解析token三个方法。\n\n```java\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Encoders;\nimport io.jsonwebtoken.security.Keys;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.crypto.SecretKey;\nimport java.util.Date;\nimport java.util.Map;\n\n@Component\n@Slf4j\npublic class JwtTokenUtils {\n    /**\n     * 秘钥\n     */\n    @Value(\"${jwt.secret:52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=}\")\n    private String secret;\n    /**\n     * 有效期，单位秒\n     * - 默认2周\n     */\n    @Value(\"${jwt.expire-time-in-second:1209600}\")\n    private Long expirationTimeInSecond;\n\n    /**\n     * 为指定用户生成token\n     *\n     * @param claims 用户信息\n     * @return token\n     */\n    public String createToken(Map<String, Object> claims) {\n        Date createdTime = new Date();\n        Date expirationTime = this.getExpirationTime();\n\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        String token = Jwts.builder()\n                .setClaims(claims)               //设置自定义属性\n                .setIssuedAt(createdTime)        //设置token创建时间\n                .setExpiration(expirationTime)   //设置token过期时间\n                .signWith(key, SignatureAlgorithm.HS256)  //// 支持的算法详见：https://github.com/jwtk/jjwt#features\n                .compact();\n\n        return token;\n    }\n\n    /**\n     * 校验token\n     * @param token\n     * @return\n     */\n    public Boolean verifyToken(String token) {\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        try {\n            Jws<Claims> jws = Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token);\n            return true;\n        } catch (JwtException ex) {\n            log.error(\"token:{},验证失败\", token, ex);\n            return false;\n        }\n    }\n\n    /**\n     * 从token中获取claim\n     *\n     * @param token token\n     * @return claim\n     */\n    public Claims getClaimsFromToken(String token) {\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        try {\n            Jws<Claims> jws = Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token);\n            Claims claims = jws.getBody();\n            return claims;\n        } catch (JwtException ex) {\n            log.error(\"token:{},验证失败\", token, ex);\n            throw new RuntimeException(\"token验证失败\");\n        }\n    }\n\n    /**\n     * 生成随机合法密钥，然后手动保存到配置文件。密钥千万不能泄漏！！！\n     *\n     * @return\n     */\n    public String generateSecretString() {\n        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); //or HS384 or HS512\n        String secretString = Encoders.BASE64.encode(key.getEncoded());\n        return secretString;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new JwtTokenUtils().generateSecretString());\n    }\n\n    /**\n     * 计算token的过期时间\n     *\n     * @return 过期时间\n     */\n    private Date getExpirationTime() {\n        return new Date(System.currentTimeMillis() + this.expirationTimeInSecond * 1000);\n    }\n}\n```\n\nspringboot配置文件中增加以下配置，没有配置的话会使用默认值：其中密钥可以用generateSecretString方法生成一个随机合法密钥。\n\n```yaml\njwt:\n  secret: 52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=\n  expire-time-in-second: 1209600\n```\n\n#### 2、增加NoNeedToken注解\n\n默认所有接口都需要校验token，@NoNeedToken注解用来表示接口不需要校验token，例如登录接口和一些公共接口。\n\n```java\nimport java.lang.annotation.*;\n\n@Target({ElementType.METHOD, ElementType.TYPE}) //注解的范围是类、接口、枚举的方法上\n@Retention(RetentionPolicy.RUNTIME)//被虚拟机保存，可用反射机制读取\n@Documented\npublic @interface NoNeedToken {\n}\n```\n\n#### 3、配置过滤器\n\n编写token校验过滤器，\n\n```java\nimport com.alibaba.fastjson.JSONObject;\nimport com.mj.time.annotation.NoNeedToken;\nimport com.mj.time.common.ErrorCodeEnum;\nimport com.mj.time.util.JwtTokenUtils;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.PrintWriter;\n\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n    @Autowired\n    private JwtTokenUtils jwtTokenUtils;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 设置返回值属性\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        String token = request.getHeader(\"token\");\n        PrintWriter out;\n        // 对于注解的判断\n        HandlerMethod handlerMethod = (HandlerMethod) handler;\n        if (handlerMethod.getMethodAnnotation(NoNeedToken.class) != null || handlerMethod.getBeanType().isAnnotationPresent(NoNeedToken.class)) {\n            // 如果方法拥有NoNeedToken标注或者所属的类拥有NoNeedToken 就直接放行\n            return true;\n        }\n\n        if (StringUtils.isEmpty(token)) {\n            JSONObject res = new JSONObject();\n            res.put(\"code\", ErrorCodeEnum.TOKEN_ERROR.getCode());\n            res.put(\"message\", ErrorCodeEnum.TOKEN_ERROR.getMsg());\n            out = response.getWriter();\n            out.append(res.toString());\n            return false;\n        }\n\n        Claims claims = null;\n        try {\n            claims = jwtTokenUtils.getClaimsFromToken(token);\n        } catch (Exception ignored) {\n            //解析token失败\n            JSONObject res = new JSONObject();\n            res.put(\"code\", ErrorCodeEnum.TOKEN_ERROR.getCode());\n            res.put(\"message\", ErrorCodeEnum.TOKEN_ERROR.getMsg());\n            out = response.getWriter();\n            out.append(res.toString());\n            return false;\n        }\n        //将token中解析出来的信息放入attribute中\n        if (claims != null) {\n            request.setAttribute(\"user_claims\", claims);\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n配置过滤器，默认将所有的请求拦截：\n\n```java\nimport com.mj.time.intercepter.TokenInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport javax.annotation.Resource;\n\n@Configuration\npublic class InterceptorConfig  implements WebMvcConfigurer {\n    @Resource\n    TokenInterceptor tokenInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 设置所有的路径都要进行拦截\n        registry.addInterceptor(tokenInterceptor).addPathPatterns(\"/**\");\n    }\n}\n```\n\n#### 4、编写BaseController\n\n所有的contoller需要继承BaseController，BaseController主要解析Attribute中的user_claims获取用户信息。\n\n```java\nimport com.mj.time.common.Constants;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class BaseController {\n    protected HttpServletRequest request;\n    protected HttpServletResponse response;\n    protected Integer userId;  // 用户id\n    protected String authType; // 登录类型\n\n    @ModelAttribute\n    public void parseClaims(HttpServletRequest request, HttpServletResponse response) {\n        this.request = request;\n        this.response = response;\n        // 获取到在拦截器里设置的 user_claims， 并将其保存到类的成员变量中\n        Claims userClaims = (Claims) request.getAttribute(\"user_claims\");\n        if (userClaims != null) {\n            this.userId = (Integer) userClaims.get(Constants.CLAIMS_USER_ID);\n            this.authType = (String) userClaims.get(Constants.CLAIMS_AUTH_TYPE);\n        }\n    }\n}\n```\n\n#### 5、登录接口\n\n登录接口加上@NoNeedToken注解，因为登录的时候还没有token，调用登录接口获取token。\n\n```java\nimport com.mj.time.annotation.NoNeedToken;\nimport com.mj.time.common.CommonResponse;\nimport com.mj.time.service.AuthService;\nimport com.mj.time.service.dto.AuthLoginDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/time/auth\")\n@NoNeedToken\npublic class AuthController {\n    @Autowired\n    private AuthService authService;\n\n    @PostMapping(value = \"/login\")\n    public CommonResponse<AuthLoginDto> login(@RequestBody AuthLoginDto authLoginDto) {\n        AuthLoginDto authLoginDtoResp = authService.login(authLoginDto);\n        return new CommonResponse<AuthLoginDto>(authLoginDtoResp);\n    }\n}\n```\n\n实现就是先去数据库判断用户名密码对不对，如果正确使用userId去创建一个token放入返回中。\n\n```java\n@Override\npublic AuthLoginDto login(AuthLoginDto authLoginDto) {\n  User user = userMapper.selectByUserNameOrMobile(authLoginDto.getUserNameOrMobile());\n  if (user == null || !user.getPassword().equals(authLoginDto.getPassword())) {\n    throw new BizException(ErrorCodeEnum.USERNAME_OR_PASSWORD_ERROR);\n  } else {\n    authLoginDto.setUserInfo(user);\n\n    Map<String, Object> claims = new HashMap<>();\n    claims.put(Constants.CLAIMS_USER_ID, user.getId());\n    claims.put(Constants.CLAIMS_AUTH_TYPE, AuthTypeEnum.PASSWORD.getValue());\n    String token = jwtTokenUtils.createToken(claims);\n    authLoginDto.setToken(token);\n  }\n  return authLoginDto;\n}\n```\n\n调用结果：我们可以获取到一个token\n\n![image-20201209195520846](image-20201209195520846.png)\n\n#### 6、需要鉴权接口\n\n无需任何改变，默认所有接口都需要鉴权：\n\n```java\n@RestController\n@RequestMapping(\"/api/time/tag\")\npublic class TagController extends BaseController {\n    @Autowired\n    private TagService tagService;\n  \n    @GetMapping\n    CommonResponse<List<Tag>> getAllMenu() {\n        List<Tag> tagList = tagService.selectUserTagList(this.userId);\n        return new CommonResponse<List<Tag>>(tagList);\n    }\n}\n\n```\n\n如果在Headers中没有传入token：调用失败\n\n![image-20201209195709567](image-20201209195709567.png)\n\n传入token之后：调用成功\n\n![image-20201209195746076](image-20201209195746076.png)\n\n#### \n\n## 七、结语\n\n至此、我们已经了解JWT的原理、jjwt库的使用以及项目中的应用。赶紧自己去实验一下吧。\n\n以上所展示的源码地址：https://github.com/shelimingming/time_manage/tree/main/time_manage_backend","source":"_posts/JWT.md","raw":"---\nlayout:     post\ntitle:      \"JWT深入讲解与Java项目实战（附源码)\"\ndate:       2020-12-10 12:00:00\nauthor:     \"佘黎明\"\n# header-img: \"post-bg-2015.jpg\"\ntags:\n    - SSO\n    - 微信小程序\n---\n\n## 一、JWT是什么\n\nJWT全称Json Web Token，它是一个开放的标准，它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。 由于此信息是经过数字签名的，因此可以被验证和信任。\n\n这是官网（https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。\n\n## 二、JWT产生的原因\n\n### 传统的session认证：\n\n我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。\n\n传统的Session认证有一个明显的弊端，就是服务端需要存储所有用户的登录信息，这样当用户量非常大的时候服务端的压力就会很大（当然也有一系列的分布式session的方案）。所以就有一种基于token的鉴权机制被发明：\n\n### 基于token的鉴权机制：\n\n首先用户向服务器发送用户名密码的鉴权信息，服务器根据JWT的规则生成一个token，这个token包含用户的信息和签名的信息，用户拿到这个token保存在本地，以后发请求的时候都带上这个token，服务端根据token可以验证token的合法性并解析出用户的信息，这样就可以识别出是哪个用户了。\n\n那么这个token怎么被生成呢？\n\n## 三、JWT的结构\n\nJWT分为三个部分：header、playload、signature。\n\n#### header：头部\n\n头部一般都是固定两个字段：\n\ntyp：声明类型，一般JWT\n\nalg：声明加密算法，一般使用HMAC SHA256\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n然后将这个Json字符串进行base64编码（这种加密是对称的，可以直接进行解密）构成第一部分:\n\n可以在网站上在线加密：https://tool.oschina.net/encrypt?type=3\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n#### playload：存放有效信息的地方\n\n**1、标准中注册的声明 (建议但不强制使用) ：**\n\n`iss`: jwt签发者\n\n`sub`: jwt所面向的用户\n\n`aud`: 接收jwt的一方\n\n`exp`: jwt的过期时间，这个过期时间必须要大于签发时间\n\n`nbf`: 定义在什么时间之前，该jwt都是不可用的.\n\n`iat`: jwt的签发时间\n\n`jti`: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n**2、公共的声明 ：**\n\n公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。\n\n**3、私有的声明 ：**\n\n私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n然后将其进行base64加密，得到Jwt的第二部分:\n\n```\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n```\n\n#### signature：签名信息\n\n这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密\n\n最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt:\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n## 四、Java实现JWT\n\n基于以上原理，我们调用一些jdk自带的包，就可以基于以上规则生成JWT的token。\n\n```java\npackage com.mj.time.util;\n\nimport org.apache.tomcat.util.codec.binary.Base64;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Test {\n    public static String Hmacsha256(String secret, String message) throws NoSuchAlgorithmException, InvalidKeyException {\n        Mac hmac_sha256 = Mac.getInstance(\"HMacSHA256\");\n        SecretKeySpec key = new SecretKeySpec(secret.getBytes(), \"HMacSHA256\");\n        hmac_sha256.init(key);\n        byte[] buff = hmac_sha256.doFinal(message.getBytes());\n        return Base64.encodeBase64URLSafeString(buff);\n    }\n\n    public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException {\n        String secret = \"secret123\";\n        String header = \"{\\\"type\\\":\\\"JWT\\\",\\\"alg\\\":\\\"HS256\\\"}\";\n        String claim = \"{\\\"sub\\\": \\\"1234567890\\\",\\\"name\\\": \\\"John Doe\\\",\\\"iat\\\":1516239022}\";\n\n        String base64Header = Base64.encodeBase64URLSafeString(header.getBytes());\n        String base64Claim = Base64.encodeBase64URLSafeString(claim.getBytes());\n        String signature = Hmacsha256(secret, base64Header + \".\" + base64Claim);\n\n        String jwt = base64Header + \".\" + base64Claim  + \".\" + signature;\n        System.out.println(jwt);\n    }\n}\n```\n\n明显这样生成token非常麻烦，很容器出错，所以就有一系列的第三方库支持，各种语言都有。可以看官网上列的：https://jwt.io/#libraries-io\n\n## 五、开源库 jjwt 实现 JWT\n\njjwt是目前使用比较多，支持加密算法比较多的Java库。github有7000+star。比官方的库java-jwt的3000+star多了一倍多。所以我们使用jjwt作为我们的例子：\n\n源码的github地址：https://github.com/jwtk/jjwt\n\n### 1、基本使用\n\n**1、引入pom依赖**\n\n```xml\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-api</artifactId>\n    <version>0.11.2</version>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-impl</artifactId>\n    <version>0.11.2</version>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-jackson</artifactId>\n    <version>0.11.2</version>\n    <scope>runtime</scope>\n</dependency>\n```\n\n**2、生成JWTtoken**\n\n```java\nKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256);\nString jws = Jwts.builder().setSubject(\"Joe\").signWith(key).compact();\n```\n\n执行后生成的jws为：\n\n`eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.jObJ_3Y_mXHg2vlyvYQQH3RRZlwZvtrvoZnKts3Aq58`\n\n哈哈，只要两行代码，创建一个token。这个token使用HMAC-SHA-256进行签名，并设定了标准中注册的声明`sub`的值为`Joe`\n\n**3、校验token及获取内容**\n\n```java\ntry{\n\t\tString subject = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jws).getBody().getSubject();\n  \t//token合法，进行后续操作\n} catch (JwtException e) {\n    //token不可信\n}\n```\n\n如果传入的token是合法的，subject就可以拿到之前放入的`Joe`。如果token被修改或者失效，就会抛出JwtException。\n\n### 2、签名算法及密钥介绍\n\n在介绍jjwt详细使用之前，我们先介绍一下和jwt相关的签名算法和密钥，了解它们对正确创建jwt至关重要。\n\nJWT规范标识了12种标准签名算法-3种密钥算法和9种非对称密钥算法：\n\n- `HS256`: HMAC using SHA-256\n- `HS384`: HMAC using SHA-384\n- `HS512`: HMAC using SHA-512\n- `ES256`: ECDSA using P-256 and SHA-256\n- `ES384`: ECDSA using P-384 and SHA-384\n- `ES512`: ECDSA using P-521 and SHA-512\n- `RS256`: RSASSA-PKCS-v1_5 using SHA-256\n- `RS384`: RSASSA-PKCS-v1_5 using SHA-384\n- `RS512`: RSASSA-PKCS-v1_5 using SHA-512\n- `PS256`: RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n- `PS384`: RSASSA-PSS using SHA-384 and MGF1 with SHA-384\n- `PS512`: RSASSA-PSS using SHA-512 and MGF1 with SHA-512\n\n这些算法其实对我们程序员来说并不重要，我们只要选择合适的算法即可。但是我们需要注意一下密钥的选择。JWT规范中要求必须使用对于所选算法足够强的密钥。所以jjwt还将强制你为选择的算法使用足够强大的密钥。 如果为给定算法提供弱密钥，JJWT将拒绝它并抛出异常。\n\n当然jjwt为了让你能不需要了解算法就可以生成合法的密钥，jjwt提供了工具类`io.jsonwebtoken.security.Keys`。我们可以使用这个工具类生成对应算法的正确最小长度的安全随机密钥，然后保存起来，后面就可以当作加密的密钥了。\n\n```java\nSecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); //or HS384 or HS512\nString secretString = Encoders.BASE64.encode(key.getEncoded());\n```\n\n还支持非对称加密的公私钥生成：\n\n```java\nKeyPair keyPair = Keys.keyPairFor(SignatureAlgorithm.RS256); \n//or RS384, RS512, PS256, PS384, PS512, ES256, ES384, ES512\nkeyPair.getPrivate()//私钥\nkeyPair.getPublic()//公钥\n```\n\n可以使用私钥创建一个JWS，并使用公钥来解析/验证JWS。\n\n### 3、详细使用\n\n创建一个JWS分为以下4个步骤：\n\n1、使用Jwts.builder（）方法创建JwtBuilder实例。\n\n2、调用JwtBuilder方法以根据需要添加标头参数和声明。\n\n3、指定要用于对JWT签名的SecretKey或非对称PrivateKey。 \n\n4、最后，调用compact（）方法进行压缩和签名，生成最终的jws。\n\n```java\nString jws = Jwts.builder() // (1)\n    .setSubject(\"Bob\")      // (2) \n    .signWith(key)          // (3)\n    .compact();             // (4)\n```\n\n下面针对每一个可以扩展的点进行详细说明：\n\n#### Header Parameters\n\nJWT的header提供内容、格式、加密算法的元数据，如果想增加header的数据，可以调用`JwtBuilder` 的`setHeaderParam`方法一次或多次来添加Header：\n\n```java\nString jws = Jwts.builder()\n    .setHeaderParam(\"kid\", \"myKeyId\")\n    .setHeaderParam(\"\",\"\")\n    // ... etc ...\n```\n\n#### Claims\n\nClaims是JWT的主体，并包含JWT创建者希望提供给JWT接收者的信息。\n\nJWT提供了一些标准的Claims：jjwt都提供了标准的方法设置：\n\n- `setIssuer`: sets the [`iss` (Issuer) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.1)\n- `setSubject`: sets the [`sub` (Subject) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.2)\n- `setAudience`: sets the [`aud` (Audience) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.3)\n- `setExpiration`: sets the [`exp` (Expiration Time) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.4)\n- `setNotBefore`: sets the [`nbf` (Not Before) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.5)\n- `setIssuedAt`: sets the [`iat` (Issued At) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.6)\n- `setId`: sets the [`jti` (JWT ID) Claim](https://tools.ietf.org/html/rfc7519#section-4.1.7)\n\n```java\nString jws = Jwts.builder()\n    .setIssuer(\"me\")\n    .setSubject(\"Bob\")\n    .setAudience(\"you\")\n    .setExpiration(expiration) //a java.util.Date\n    .setNotBefore(notBefore) //a java.util.Date \n    .setIssuedAt(new Date()) // for example, now\n    .setId(UUID.randomUUID()) //just an example id\n    /// ... etc ...\n```\n\n使用自定义的Claims：\n\n```java\nString jws = Jwts.builder()\n    .claim(\"hello\", \"world\")\n    // ... etc ...\n```\n\n#### Signing Key\n\n建议使用 `JwtBuilder`的`signWith`方法设置密钥，因为当你的密钥长度不满足算法的要求的时候，jjwt会自动给你改成对密钥长度要求低的加密算法。并且该方法还会给你设置header中的加密算法。\n\n```java\nString secretString = \"XXXXXXXXXX\";\nSecretKey secretKey = Keys.hmacShaKeyFor(secretString.getBytes(StandardCharsets.UTF_8));\nString jws = Jwts.builder()\n\n   .signWith(secretKey) // <---\n   .compact();\n```\n\n#### 解析JWS\n\n```java\nJws<Claims> jws;\n\ntry {\n    jws = Jwts.parserBuilder()  // (1)\n    .setSigningKey(key)         // (2)\n    .build()                    // (3)\n    .parseClaimsJws(jwsString); // (4)\n    \n    // we can safely trust the JWT\n     \n} catch (JwtException ex) {       // (5)\n    \n    // we *cannot* use the JWT as intended by its creator\n}\n```\n\n\n\n## 六、Springboot项目实战源码\n\n项目实战就是将第二节中的“基于token的鉴权机制”，使用Java代码实现。\n\n#### 1、封装工具类\n\n封装JwtTokenUtils，主要包括生成token、校验token和解析token三个方法。\n\n```java\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Encoders;\nimport io.jsonwebtoken.security.Keys;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.crypto.SecretKey;\nimport java.util.Date;\nimport java.util.Map;\n\n@Component\n@Slf4j\npublic class JwtTokenUtils {\n    /**\n     * 秘钥\n     */\n    @Value(\"${jwt.secret:52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=}\")\n    private String secret;\n    /**\n     * 有效期，单位秒\n     * - 默认2周\n     */\n    @Value(\"${jwt.expire-time-in-second:1209600}\")\n    private Long expirationTimeInSecond;\n\n    /**\n     * 为指定用户生成token\n     *\n     * @param claims 用户信息\n     * @return token\n     */\n    public String createToken(Map<String, Object> claims) {\n        Date createdTime = new Date();\n        Date expirationTime = this.getExpirationTime();\n\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        String token = Jwts.builder()\n                .setClaims(claims)               //设置自定义属性\n                .setIssuedAt(createdTime)        //设置token创建时间\n                .setExpiration(expirationTime)   //设置token过期时间\n                .signWith(key, SignatureAlgorithm.HS256)  //// 支持的算法详见：https://github.com/jwtk/jjwt#features\n                .compact();\n\n        return token;\n    }\n\n    /**\n     * 校验token\n     * @param token\n     * @return\n     */\n    public Boolean verifyToken(String token) {\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        try {\n            Jws<Claims> jws = Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token);\n            return true;\n        } catch (JwtException ex) {\n            log.error(\"token:{},验证失败\", token, ex);\n            return false;\n        }\n    }\n\n    /**\n     * 从token中获取claim\n     *\n     * @param token token\n     * @return claim\n     */\n    public Claims getClaimsFromToken(String token) {\n        byte[] keyBytes = secret.getBytes();\n        SecretKey key = Keys.hmacShaKeyFor(keyBytes);\n\n        try {\n            Jws<Claims> jws = Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token);\n            Claims claims = jws.getBody();\n            return claims;\n        } catch (JwtException ex) {\n            log.error(\"token:{},验证失败\", token, ex);\n            throw new RuntimeException(\"token验证失败\");\n        }\n    }\n\n    /**\n     * 生成随机合法密钥，然后手动保存到配置文件。密钥千万不能泄漏！！！\n     *\n     * @return\n     */\n    public String generateSecretString() {\n        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); //or HS384 or HS512\n        String secretString = Encoders.BASE64.encode(key.getEncoded());\n        return secretString;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new JwtTokenUtils().generateSecretString());\n    }\n\n    /**\n     * 计算token的过期时间\n     *\n     * @return 过期时间\n     */\n    private Date getExpirationTime() {\n        return new Date(System.currentTimeMillis() + this.expirationTimeInSecond * 1000);\n    }\n}\n```\n\nspringboot配置文件中增加以下配置，没有配置的话会使用默认值：其中密钥可以用generateSecretString方法生成一个随机合法密钥。\n\n```yaml\njwt:\n  secret: 52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=\n  expire-time-in-second: 1209600\n```\n\n#### 2、增加NoNeedToken注解\n\n默认所有接口都需要校验token，@NoNeedToken注解用来表示接口不需要校验token，例如登录接口和一些公共接口。\n\n```java\nimport java.lang.annotation.*;\n\n@Target({ElementType.METHOD, ElementType.TYPE}) //注解的范围是类、接口、枚举的方法上\n@Retention(RetentionPolicy.RUNTIME)//被虚拟机保存，可用反射机制读取\n@Documented\npublic @interface NoNeedToken {\n}\n```\n\n#### 3、配置过滤器\n\n编写token校验过滤器，\n\n```java\nimport com.alibaba.fastjson.JSONObject;\nimport com.mj.time.annotation.NoNeedToken;\nimport com.mj.time.common.ErrorCodeEnum;\nimport com.mj.time.util.JwtTokenUtils;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.PrintWriter;\n\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n    @Autowired\n    private JwtTokenUtils jwtTokenUtils;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 设置返回值属性\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        String token = request.getHeader(\"token\");\n        PrintWriter out;\n        // 对于注解的判断\n        HandlerMethod handlerMethod = (HandlerMethod) handler;\n        if (handlerMethod.getMethodAnnotation(NoNeedToken.class) != null || handlerMethod.getBeanType().isAnnotationPresent(NoNeedToken.class)) {\n            // 如果方法拥有NoNeedToken标注或者所属的类拥有NoNeedToken 就直接放行\n            return true;\n        }\n\n        if (StringUtils.isEmpty(token)) {\n            JSONObject res = new JSONObject();\n            res.put(\"code\", ErrorCodeEnum.TOKEN_ERROR.getCode());\n            res.put(\"message\", ErrorCodeEnum.TOKEN_ERROR.getMsg());\n            out = response.getWriter();\n            out.append(res.toString());\n            return false;\n        }\n\n        Claims claims = null;\n        try {\n            claims = jwtTokenUtils.getClaimsFromToken(token);\n        } catch (Exception ignored) {\n            //解析token失败\n            JSONObject res = new JSONObject();\n            res.put(\"code\", ErrorCodeEnum.TOKEN_ERROR.getCode());\n            res.put(\"message\", ErrorCodeEnum.TOKEN_ERROR.getMsg());\n            out = response.getWriter();\n            out.append(res.toString());\n            return false;\n        }\n        //将token中解析出来的信息放入attribute中\n        if (claims != null) {\n            request.setAttribute(\"user_claims\", claims);\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n配置过滤器，默认将所有的请求拦截：\n\n```java\nimport com.mj.time.intercepter.TokenInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport javax.annotation.Resource;\n\n@Configuration\npublic class InterceptorConfig  implements WebMvcConfigurer {\n    @Resource\n    TokenInterceptor tokenInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 设置所有的路径都要进行拦截\n        registry.addInterceptor(tokenInterceptor).addPathPatterns(\"/**\");\n    }\n}\n```\n\n#### 4、编写BaseController\n\n所有的contoller需要继承BaseController，BaseController主要解析Attribute中的user_claims获取用户信息。\n\n```java\nimport com.mj.time.common.Constants;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class BaseController {\n    protected HttpServletRequest request;\n    protected HttpServletResponse response;\n    protected Integer userId;  // 用户id\n    protected String authType; // 登录类型\n\n    @ModelAttribute\n    public void parseClaims(HttpServletRequest request, HttpServletResponse response) {\n        this.request = request;\n        this.response = response;\n        // 获取到在拦截器里设置的 user_claims， 并将其保存到类的成员变量中\n        Claims userClaims = (Claims) request.getAttribute(\"user_claims\");\n        if (userClaims != null) {\n            this.userId = (Integer) userClaims.get(Constants.CLAIMS_USER_ID);\n            this.authType = (String) userClaims.get(Constants.CLAIMS_AUTH_TYPE);\n        }\n    }\n}\n```\n\n#### 5、登录接口\n\n登录接口加上@NoNeedToken注解，因为登录的时候还没有token，调用登录接口获取token。\n\n```java\nimport com.mj.time.annotation.NoNeedToken;\nimport com.mj.time.common.CommonResponse;\nimport com.mj.time.service.AuthService;\nimport com.mj.time.service.dto.AuthLoginDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/time/auth\")\n@NoNeedToken\npublic class AuthController {\n    @Autowired\n    private AuthService authService;\n\n    @PostMapping(value = \"/login\")\n    public CommonResponse<AuthLoginDto> login(@RequestBody AuthLoginDto authLoginDto) {\n        AuthLoginDto authLoginDtoResp = authService.login(authLoginDto);\n        return new CommonResponse<AuthLoginDto>(authLoginDtoResp);\n    }\n}\n```\n\n实现就是先去数据库判断用户名密码对不对，如果正确使用userId去创建一个token放入返回中。\n\n```java\n@Override\npublic AuthLoginDto login(AuthLoginDto authLoginDto) {\n  User user = userMapper.selectByUserNameOrMobile(authLoginDto.getUserNameOrMobile());\n  if (user == null || !user.getPassword().equals(authLoginDto.getPassword())) {\n    throw new BizException(ErrorCodeEnum.USERNAME_OR_PASSWORD_ERROR);\n  } else {\n    authLoginDto.setUserInfo(user);\n\n    Map<String, Object> claims = new HashMap<>();\n    claims.put(Constants.CLAIMS_USER_ID, user.getId());\n    claims.put(Constants.CLAIMS_AUTH_TYPE, AuthTypeEnum.PASSWORD.getValue());\n    String token = jwtTokenUtils.createToken(claims);\n    authLoginDto.setToken(token);\n  }\n  return authLoginDto;\n}\n```\n\n调用结果：我们可以获取到一个token\n\n![image-20201209195520846](image-20201209195520846.png)\n\n#### 6、需要鉴权接口\n\n无需任何改变，默认所有接口都需要鉴权：\n\n```java\n@RestController\n@RequestMapping(\"/api/time/tag\")\npublic class TagController extends BaseController {\n    @Autowired\n    private TagService tagService;\n  \n    @GetMapping\n    CommonResponse<List<Tag>> getAllMenu() {\n        List<Tag> tagList = tagService.selectUserTagList(this.userId);\n        return new CommonResponse<List<Tag>>(tagList);\n    }\n}\n\n```\n\n如果在Headers中没有传入token：调用失败\n\n![image-20201209195709567](image-20201209195709567.png)\n\n传入token之后：调用成功\n\n![image-20201209195746076](image-20201209195746076.png)\n\n#### \n\n## 七、结语\n\n至此、我们已经了解JWT的原理、jjwt库的使用以及项目中的应用。赶紧自己去实验一下吧。\n\n以上所展示的源码地址：https://github.com/shelimingming/time_manage/tree/main/time_manage_backend","slug":"JWT","published":1,"updated":"2020-12-09T16:30:06.006Z","comments":1,"photos":[],"link":"","_id":"ckihmq1xa0004sy5nnsoygw23","content":"<h2 id=\"一、JWT是什么\"><a href=\"#一、JWT是什么\" class=\"headerlink\" title=\"一、JWT是什么\"></a>一、JWT是什么</h2><p>JWT全称Json Web Token，它是一个开放的标准，它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。 由于此信息是经过数字签名的，因此可以被验证和信任。</p>\n<p>这是官网（<a href=\"https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。\" target=\"_blank\" rel=\"noopener\">https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。</a></p>\n<h2 id=\"二、JWT产生的原因\"><a href=\"#二、JWT产生的原因\" class=\"headerlink\" title=\"二、JWT产生的原因\"></a>二、JWT产生的原因</h2><h3 id=\"传统的session认证：\"><a href=\"#传统的session认证：\" class=\"headerlink\" title=\"传统的session认证：\"></a>传统的session认证：</h3><p>我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。</p>\n<p>传统的Session认证有一个明显的弊端，就是服务端需要存储所有用户的登录信息，这样当用户量非常大的时候服务端的压力就会很大（当然也有一系列的分布式session的方案）。所以就有一种基于token的鉴权机制被发明：</p>\n<h3 id=\"基于token的鉴权机制：\"><a href=\"#基于token的鉴权机制：\" class=\"headerlink\" title=\"基于token的鉴权机制：\"></a>基于token的鉴权机制：</h3><p>首先用户向服务器发送用户名密码的鉴权信息，服务器根据JWT的规则生成一个token，这个token包含用户的信息和签名的信息，用户拿到这个token保存在本地，以后发请求的时候都带上这个token，服务端根据token可以验证token的合法性并解析出用户的信息，这样就可以识别出是哪个用户了。</p>\n<p>那么这个token怎么被生成呢？</p>\n<h2 id=\"三、JWT的结构\"><a href=\"#三、JWT的结构\" class=\"headerlink\" title=\"三、JWT的结构\"></a>三、JWT的结构</h2><p>JWT分为三个部分：header、playload、signature。</p>\n<h4 id=\"header：头部\"><a href=\"#header：头部\" class=\"headerlink\" title=\"header：头部\"></a>header：头部</h4><p>头部一般都是固定两个字段：</p>\n<p>typ：声明类型，一般JWT</p>\n<p>alg：声明加密算法，一般使用HMAC SHA256</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将这个Json字符串进行base64编码（这种加密是对称的，可以直接进行解密）构成第一部分:</p>\n<p>可以在网站上在线加密：<a href=\"https://tool.oschina.net/encrypt?type=3\" target=\"_blank\" rel=\"noopener\">https://tool.oschina.net/encrypt?type=3</a></p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI<span class=\"number\">1</span><span class=\"symbol\">NiIsInR5</span>cCI<span class=\"number\">6</span>IkpX<span class=\"attr\">VCJ9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"playload：存放有效信息的地方\"><a href=\"#playload：存放有效信息的地方\" class=\"headerlink\" title=\"playload：存放有效信息的地方\"></a>playload：存放有效信息的地方</h4><p><strong>1、标准中注册的声明 (建议但不强制使用) ：</strong></p>\n<p><code>iss</code>: jwt签发者</p>\n<p><code>sub</code>: jwt所面向的用户</p>\n<p><code>aud</code>: 接收jwt的一方</p>\n<p><code>exp</code>: jwt的过期时间，这个过期时间必须要大于签发时间</p>\n<p><code>nbf</code>: 定义在什么时间之前，该jwt都是不可用的.</p>\n<p><code>iat</code>: jwt的签发时间</p>\n<p><code>jti</code>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p>\n<p><strong>2、公共的声明 ：</strong></p>\n<p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<p><strong>3、私有的声明 ：</strong></p>\n<p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"iat\"</span>: <span class=\"number\">1516239022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将其进行base64加密，得到Jwt的第二部分:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMj<span class=\"name\">M0</span><span class=\"symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"number\">6</span>Ikpva<span class=\"name\">G4</span>gR<span class=\"name\">G9</span>lIiwiaWF<span class=\"number\">0</span>Ijox<span class=\"symbol\">NTE2</span>Mj<span class=\"name\">M5</span>MDIyfQ</span><br></pre></td></tr></table></figure>\n<h4 id=\"signature：签名信息\"><a href=\"#signature：签名信息\" class=\"headerlink\" title=\"signature：签名信息\"></a>signature：签名信息</h4><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密</p>\n<p>最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI<span class=\"number\">1</span><span class=\"symbol\">NiIsInR5</span>cCI<span class=\"number\">6</span>IkpX<span class=\"attr\">VCJ9</span>.eyJzdWIiOiIxMj<span class=\"name\">M0</span><span class=\"symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"number\">6</span>Ikpva<span class=\"name\">G4</span>gR<span class=\"name\">G9</span>lIiwiaWF<span class=\"number\">0</span>Ijox<span class=\"symbol\">NTE2</span>Mj<span class=\"name\">M5</span>MDIyfQ.SflKxwRJSMeKKF<span class=\"number\">2</span>QT<span class=\"number\">4</span>fwpMeJf<span class=\"number\">36</span>POk<span class=\"number\">6</span>yJV_adQssw<span class=\"number\">5</span>c</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、Java实现JWT\"><a href=\"#四、Java实现JWT\" class=\"headerlink\" title=\"四、Java实现JWT\"></a>四、Java实现JWT</h2><p>基于以上原理，我们调用一些jdk自带的包，就可以基于以上规则生成JWT的token。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mj.time.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Mac;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.InvalidKeyException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">Hmacsha256</span><span class=\"params\">(String secret, String message)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        Mac hmac_sha256 = Mac.getInstance(<span class=\"string\">\"HMacSHA256\"</span>);</span><br><span class=\"line\">        SecretKeySpec key = <span class=\"keyword\">new</span> SecretKeySpec(secret.getBytes(), <span class=\"string\">\"HMacSHA256\"</span>);</span><br><span class=\"line\">        hmac_sha256.init(key);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buff = hmac_sha256.doFinal(message.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.encodeBase64URLSafeString(buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InvalidKeyException, NoSuchAlgorithmException </span>&#123;</span><br><span class=\"line\">        String secret = <span class=\"string\">\"secret123\"</span>;</span><br><span class=\"line\">        String header = <span class=\"string\">\"&#123;\\\"type\\\":\\\"JWT\\\",\\\"alg\\\":\\\"HS256\\\"&#125;\"</span>;</span><br><span class=\"line\">        String claim = <span class=\"string\">\"&#123;\\\"sub\\\": \\\"1234567890\\\",\\\"name\\\": \\\"John Doe\\\",\\\"iat\\\":1516239022&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String base64Header = Base64.encodeBase64URLSafeString(header.getBytes());</span><br><span class=\"line\">        String base64Claim = Base64.encodeBase64URLSafeString(claim.getBytes());</span><br><span class=\"line\">        String signature = Hmacsha256(secret, base64Header + <span class=\"string\">\".\"</span> + base64Claim);</span><br><span class=\"line\"></span><br><span class=\"line\">        String jwt = base64Header + <span class=\"string\">\".\"</span> + base64Claim  + <span class=\"string\">\".\"</span> + signature;</span><br><span class=\"line\">        System.out.println(jwt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>明显这样生成token非常麻烦，很容器出错，所以就有一系列的第三方库支持，各种语言都有。可以看官网上列的：<a href=\"https://jwt.io/#libraries-io\" target=\"_blank\" rel=\"noopener\">https://jwt.io/#libraries-io</a></p>\n<h2 id=\"五、开源库-jjwt-实现-JWT\"><a href=\"#五、开源库-jjwt-实现-JWT\" class=\"headerlink\" title=\"五、开源库 jjwt 实现 JWT\"></a>五、开源库 jjwt 实现 JWT</h2><p>jjwt是目前使用比较多，支持加密算法比较多的Java库。github有7000+star。比官方的库java-jwt的3000+star多了一倍多。所以我们使用jjwt作为我们的例子：</p>\n<p>源码的github地址：<a href=\"https://github.com/jwtk/jjwt\" target=\"_blank\" rel=\"noopener\">https://github.com/jwtk/jjwt</a></p>\n<h3 id=\"1、基本使用\"><a href=\"#1、基本使用\" class=\"headerlink\" title=\"1、基本使用\"></a>1、基本使用</h3><p><strong>1、引入pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-jackson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、生成JWTtoken</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);</span><br><span class=\"line\">String jws = Jwts.builder().setSubject(<span class=\"string\">\"Joe\"</span>).signWith(key).compact();</span><br></pre></td></tr></table></figure>\n<p>执行后生成的jws为：</p>\n<p><code>eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.jObJ_3Y_mXHg2vlyvYQQH3RRZlwZvtrvoZnKts3Aq58</code></p>\n<p>哈哈，只要两行代码，创建一个token。这个token使用HMAC-SHA-256进行签名，并设定了标准中注册的声明<code>sub</code>的值为<code>Joe</code></p>\n<p><strong>3、校验token及获取内容</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tString subject = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jws).getBody().getSubject();</span><br><span class=\"line\">  \t<span class=\"comment\">//token合法，进行后续操作</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JwtException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//token不可信</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入的token是合法的，subject就可以拿到之前放入的<code>Joe</code>。如果token被修改或者失效，就会抛出JwtException。</p>\n<h3 id=\"2、签名算法及密钥介绍\"><a href=\"#2、签名算法及密钥介绍\" class=\"headerlink\" title=\"2、签名算法及密钥介绍\"></a>2、签名算法及密钥介绍</h3><p>在介绍jjwt详细使用之前，我们先介绍一下和jwt相关的签名算法和密钥，了解它们对正确创建jwt至关重要。</p>\n<p>JWT规范标识了12种标准签名算法-3种密钥算法和9种非对称密钥算法：</p>\n<ul>\n<li><code>HS256</code>: HMAC using SHA-256</li>\n<li><code>HS384</code>: HMAC using SHA-384</li>\n<li><code>HS512</code>: HMAC using SHA-512</li>\n<li><code>ES256</code>: ECDSA using P-256 and SHA-256</li>\n<li><code>ES384</code>: ECDSA using P-384 and SHA-384</li>\n<li><code>ES512</code>: ECDSA using P-521 and SHA-512</li>\n<li><code>RS256</code>: RSASSA-PKCS-v1_5 using SHA-256</li>\n<li><code>RS384</code>: RSASSA-PKCS-v1_5 using SHA-384</li>\n<li><code>RS512</code>: RSASSA-PKCS-v1_5 using SHA-512</li>\n<li><code>PS256</code>: RSASSA-PSS using SHA-256 and MGF1 with SHA-256</li>\n<li><code>PS384</code>: RSASSA-PSS using SHA-384 and MGF1 with SHA-384</li>\n<li><code>PS512</code>: RSASSA-PSS using SHA-512 and MGF1 with SHA-512</li>\n</ul>\n<p>这些算法其实对我们程序员来说并不重要，我们只要选择合适的算法即可。但是我们需要注意一下密钥的选择。JWT规范中要求必须使用对于所选算法足够强的密钥。所以jjwt还将强制你为选择的算法使用足够强大的密钥。 如果为给定算法提供弱密钥，JJWT将拒绝它并抛出异常。</p>\n<p>当然jjwt为了让你能不需要了解算法就可以生成合法的密钥，jjwt提供了工具类<code>io.jsonwebtoken.security.Keys</code>。我们可以使用这个工具类生成对应算法的正确最小长度的安全随机密钥，然后保存起来，后面就可以当作加密的密钥了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); <span class=\"comment\">//or HS384 or HS512</span></span><br><span class=\"line\">String secretString = Encoders.BASE64.encode(key.getEncoded());</span><br></pre></td></tr></table></figure>\n<p>还支持非对称加密的公私钥生成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KeyPair keyPair = Keys.keyPairFor(SignatureAlgorithm.RS256); </span><br><span class=\"line\"><span class=\"comment\">//or RS384, RS512, PS256, PS384, PS512, ES256, ES384, ES512</span></span><br><span class=\"line\">keyPair.getPrivate()<span class=\"comment\">//私钥</span></span><br><span class=\"line\">keyPair.getPublic()<span class=\"comment\">//公钥</span></span><br></pre></td></tr></table></figure>\n<p>可以使用私钥创建一个JWS，并使用公钥来解析/验证JWS。</p>\n<h3 id=\"3、详细使用\"><a href=\"#3、详细使用\" class=\"headerlink\" title=\"3、详细使用\"></a>3、详细使用</h3><p>创建一个JWS分为以下4个步骤：</p>\n<p>1、使用Jwts.builder（）方法创建JwtBuilder实例。</p>\n<p>2、调用JwtBuilder方法以根据需要添加标头参数和声明。</p>\n<p>3、指定要用于对JWT签名的SecretKey或非对称PrivateKey。 </p>\n<p>4、最后，调用compact（）方法进行压缩和签名，生成最终的jws。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder() <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    .setSubject(<span class=\"string\">\"Bob\"</span>)      <span class=\"comment\">// (2) </span></span><br><span class=\"line\">    .signWith(key)          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    .compact();             <span class=\"comment\">// (4)</span></span><br></pre></td></tr></table></figure>\n<p>下面针对每一个可以扩展的点进行详细说明：</p>\n<h4 id=\"Header-Parameters\"><a href=\"#Header-Parameters\" class=\"headerlink\" title=\"Header Parameters\"></a>Header Parameters</h4><p>JWT的header提供内容、格式、加密算法的元数据，如果想增加header的数据，可以调用<code>JwtBuilder</code> 的<code>setHeaderParam</code>方法一次或多次来添加Header：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .setHeaderParam(<span class=\"string\">\"kid\"</span>, <span class=\"string\">\"myKeyId\"</span>)</span><br><span class=\"line\">    .setHeaderParam(<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Claims\"><a href=\"#Claims\" class=\"headerlink\" title=\"Claims\"></a>Claims</h4><p>Claims是JWT的主体，并包含JWT创建者希望提供给JWT接收者的信息。</p>\n<p>JWT提供了一些标准的Claims：jjwt都提供了标准的方法设置：</p>\n<ul>\n<li><code>setIssuer</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.1\" target=\"_blank\" rel=\"noopener\"><code>iss</code> (Issuer) Claim</a></li>\n<li><code>setSubject</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.2\" target=\"_blank\" rel=\"noopener\"><code>sub</code> (Subject) Claim</a></li>\n<li><code>setAudience</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.3\" target=\"_blank\" rel=\"noopener\"><code>aud</code> (Audience) Claim</a></li>\n<li><code>setExpiration</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.4\" target=\"_blank\" rel=\"noopener\"><code>exp</code> (Expiration Time) Claim</a></li>\n<li><code>setNotBefore</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.5\" target=\"_blank\" rel=\"noopener\"><code>nbf</code> (Not Before) Claim</a></li>\n<li><code>setIssuedAt</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.6\" target=\"_blank\" rel=\"noopener\"><code>iat</code> (Issued At) Claim</a></li>\n<li><code>setId</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.7\" target=\"_blank\" rel=\"noopener\"><code>jti</code> (JWT ID) Claim</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .setIssuer(<span class=\"string\">\"me\"</span>)</span><br><span class=\"line\">    .setSubject(<span class=\"string\">\"Bob\"</span>)</span><br><span class=\"line\">    .setAudience(<span class=\"string\">\"you\"</span>)</span><br><span class=\"line\">    .setExpiration(expiration) <span class=\"comment\">//a java.util.Date</span></span><br><span class=\"line\">    .setNotBefore(notBefore) <span class=\"comment\">//a java.util.Date </span></span><br><span class=\"line\">    .setIssuedAt(<span class=\"keyword\">new</span> Date()) <span class=\"comment\">// for example, now</span></span><br><span class=\"line\">    .setId(UUID.randomUUID()) <span class=\"comment\">//just an example id</span></span><br><span class=\"line\">    <span class=\"comment\">/// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<p>使用自定义的Claims：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .claim(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Signing-Key\"><a href=\"#Signing-Key\" class=\"headerlink\" title=\"Signing Key\"></a>Signing Key</h4><p>建议使用 <code>JwtBuilder</code>的<code>signWith</code>方法设置密钥，因为当你的密钥长度不满足算法的要求的时候，jjwt会自动给你改成对密钥长度要求低的加密算法。并且该方法还会给你设置header中的加密算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String secretString = <span class=\"string\">\"XXXXXXXXXX\"</span>;</span><br><span class=\"line\">SecretKey secretKey = Keys.hmacShaKeyFor(secretString.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\"></span><br><span class=\"line\">   .signWith(secretKey) <span class=\"comment\">// &lt;---</span></span><br><span class=\"line\">   .compact();</span><br></pre></td></tr></table></figure>\n<h4 id=\"解析JWS\"><a href=\"#解析JWS\" class=\"headerlink\" title=\"解析JWS\"></a>解析JWS</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jws&lt;Claims&gt; jws;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    jws = Jwts.parserBuilder()  <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    .setSigningKey(key)         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    .build()                    <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    .parseClaimsJws(jwsString); <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// we can safely trust the JWT</span></span><br><span class=\"line\">     </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;       <span class=\"comment\">// (5)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// we *cannot* use the JWT as intended by its creator</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、Springboot项目实战源码\"><a href=\"#六、Springboot项目实战源码\" class=\"headerlink\" title=\"六、Springboot项目实战源码\"></a>六、Springboot项目实战源码</h2><p>项目实战就是将第二节中的“基于token的鉴权机制”，使用Java代码实现。</p>\n<h4 id=\"1、封装工具类\"><a href=\"#1、封装工具类\" class=\"headerlink\" title=\"1、封装工具类\"></a>1、封装工具类</h4><p>封装JwtTokenUtils，主要包括生成token、校验token和解析token三个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.io.Encoders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.security.Keys;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.SecretKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JwtTokenUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 秘钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;jwt.secret:52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secret;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有效期，单位秒</span></span><br><span class=\"line\"><span class=\"comment\">     * - 默认2周</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;jwt.expire-time-in-second:1209600&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long expirationTimeInSecond;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为指定用户生成token</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> claims 用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createToken</span><span class=\"params\">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</span><br><span class=\"line\">        Date createdTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        Date expirationTime = <span class=\"keyword\">this</span>.getExpirationTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        String token = Jwts.builder()</span><br><span class=\"line\">                .setClaims(claims)               <span class=\"comment\">//设置自定义属性</span></span><br><span class=\"line\">                .setIssuedAt(createdTime)        <span class=\"comment\">//设置token创建时间</span></span><br><span class=\"line\">                .setExpiration(expirationTime)   <span class=\"comment\">//设置token过期时间</span></span><br><span class=\"line\">                .signWith(key, SignatureAlgorithm.HS256)  <span class=\"comment\">//// 支持的算法详见：https://github.com/jwtk/jjwt#features</span></span><br><span class=\"line\">                .compact();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 校验token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">verifyToken</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = Jwts.parserBuilder()</span><br><span class=\"line\">                    .setSigningKey(key)</span><br><span class=\"line\">                    .build()</span><br><span class=\"line\">                    .parseClaimsJws(token);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"token:&#123;&#125;,验证失败\"</span>, token, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从token中获取claim</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> claim</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Claims <span class=\"title\">getClaimsFromToken</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = Jwts.parserBuilder()</span><br><span class=\"line\">                    .setSigningKey(key)</span><br><span class=\"line\">                    .build()</span><br><span class=\"line\">                    .parseClaimsJws(token);</span><br><span class=\"line\">            Claims claims = jws.getBody();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> claims;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"token:&#123;&#125;,验证失败\"</span>, token, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"token验证失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成随机合法密钥，然后手动保存到配置文件。密钥千万不能泄漏！！！</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">generateSecretString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); <span class=\"comment\">//or HS384 or HS512</span></span><br><span class=\"line\">        String secretString = Encoders.BASE64.encode(key.getEncoded());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> secretString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> JwtTokenUtils().generateSecretString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算token的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Date <span class=\"title\">getExpirationTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(System.currentTimeMillis() + <span class=\"keyword\">this</span>.expirationTimeInSecond * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>springboot配置文件中增加以下配置，没有配置的话会使用默认值：其中密钥可以用generateSecretString方法生成一个随机合法密钥。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jwt:</span></span><br><span class=\"line\">  <span class=\"attr\">secret:</span> <span class=\"string\">52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=</span></span><br><span class=\"line\">  <span class=\"attr\">expire-time-in-second:</span> <span class=\"number\">1209600</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、增加NoNeedToken注解\"><a href=\"#2、增加NoNeedToken注解\" class=\"headerlink\" title=\"2、增加NoNeedToken注解\"></a>2、增加NoNeedToken注解</h4><p>默认所有接口都需要校验token，@NoNeedToken注解用来表示接口不需要校验token，例如登录接口和一些公共接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;) <span class=\"comment\">//注解的范围是类、接口、枚举的方法上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">//被虚拟机保存，可用反射机制读取</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NoNeedToken &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、配置过滤器\"><a href=\"#3、配置过滤器\" class=\"headerlink\" title=\"3、配置过滤器\"></a>3、配置过滤器</h4><p>编写token校验过滤器，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.annotation.NoNeedToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.ErrorCodeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.util.JwtTokenUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtTokenUtils jwtTokenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置返回值属性</span></span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json; charset=utf-8\"</span>);</span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        PrintWriter out;</span><br><span class=\"line\">        <span class=\"comment\">// 对于注解的判断</span></span><br><span class=\"line\">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlerMethod.getMethodAnnotation(NoNeedToken<span class=\"class\">.<span class=\"keyword\">class</span>) !</span>= <span class=\"keyword\">null</span> || handlerMethod.getBeanType().isAnnotationPresent(NoNeedToken<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果方法拥有NoNeedToken标注或者所属的类拥有NoNeedToken 就直接放行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class=\"line\">            JSONObject res = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            res.put(<span class=\"string\">\"code\"</span>, ErrorCodeEnum.TOKEN_ERROR.getCode());</span><br><span class=\"line\">            res.put(<span class=\"string\">\"message\"</span>, ErrorCodeEnum.TOKEN_ERROR.getMsg());</span><br><span class=\"line\">            out = response.getWriter();</span><br><span class=\"line\">            out.append(res.toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Claims claims = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            claims = jwtTokenUtils.getClaimsFromToken(token);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignored) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解析token失败</span></span><br><span class=\"line\">            JSONObject res = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            res.put(<span class=\"string\">\"code\"</span>, ErrorCodeEnum.TOKEN_ERROR.getCode());</span><br><span class=\"line\">            res.put(<span class=\"string\">\"message\"</span>, ErrorCodeEnum.TOKEN_ERROR.getMsg());</span><br><span class=\"line\">            out = response.getWriter();</span><br><span class=\"line\">            out.append(res.toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将token中解析出来的信息放入attribute中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (claims != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"user_claims\"</span>, claims);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置过滤器，默认将所有的请求拦截：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.intercepter.TokenInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span>  <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    TokenInterceptor tokenInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置所有的路径都要进行拦截</span></span><br><span class=\"line\">        registry.addInterceptor(tokenInterceptor).addPathPatterns(<span class=\"string\">\"/**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、编写BaseController\"><a href=\"#4、编写BaseController\" class=\"headerlink\" title=\"4、编写BaseController\"></a>4、编写BaseController</h4><p>所有的contoller需要继承BaseController，BaseController主要解析Attribute中的user_claims获取用户信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.Constants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HttpServletResponse response;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Integer userId;  <span class=\"comment\">// 用户id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String authType; <span class=\"comment\">// 登录类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parseClaims</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.response = response;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到在拦截器里设置的 user_claims， 并将其保存到类的成员变量中</span></span><br><span class=\"line\">        Claims userClaims = (Claims) request.getAttribute(<span class=\"string\">\"user_claims\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userClaims != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userId = (Integer) userClaims.get(Constants.CLAIMS_USER_ID);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.authType = (String) userClaims.get(Constants.CLAIMS_AUTH_TYPE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、登录接口\"><a href=\"#5、登录接口\" class=\"headerlink\" title=\"5、登录接口\"></a>5、登录接口</h4><p>登录接口加上@NoNeedToken注解，因为登录的时候还没有token，调用登录接口获取token。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.annotation.NoNeedToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.CommonResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.service.AuthService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.service.dto.AuthLoginDto;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/time/auth\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@NoNeedToken</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthService authService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CommonResponse&lt;AuthLoginDto&gt; <span class=\"title\">login</span><span class=\"params\">(@RequestBody AuthLoginDto authLoginDto)</span> </span>&#123;</span><br><span class=\"line\">        AuthLoginDto authLoginDtoResp = authService.login(authLoginDto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResponse&lt;AuthLoginDto&gt;(authLoginDtoResp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现就是先去数据库判断用户名密码对不对，如果正确使用userId去创建一个token放入返回中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AuthLoginDto <span class=\"title\">login</span><span class=\"params\">(AuthLoginDto authLoginDto)</span> </span>&#123;</span><br><span class=\"line\">  User user = userMapper.selectByUserNameOrMobile(authLoginDto.getUserNameOrMobile());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || !user.getPassword().equals(authLoginDto.getPassword())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(ErrorCodeEnum.USERNAME_OR_PASSWORD_ERROR);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    authLoginDto.setUserInfo(user);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    claims.put(Constants.CLAIMS_USER_ID, user.getId());</span><br><span class=\"line\">    claims.put(Constants.CLAIMS_AUTH_TYPE, AuthTypeEnum.PASSWORD.getValue());</span><br><span class=\"line\">    String token = jwtTokenUtils.createToken(claims);</span><br><span class=\"line\">    authLoginDto.setToken(token);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> authLoginDto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用结果：我们可以获取到一个token</p>\n<p><img src=\"image-20201209195520846.png\" alt=\"image-20201209195520846\"></p>\n<h4 id=\"6、需要鉴权接口\"><a href=\"#6、需要鉴权接口\" class=\"headerlink\" title=\"6、需要鉴权接口\"></a>6、需要鉴权接口</h4><p>无需任何改变，默认所有接口都需要鉴权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/time/tag\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TagService tagService;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    CommonResponse&lt;List&lt;Tag&gt;&gt; getAllMenu() &#123;</span><br><span class=\"line\">        List&lt;Tag&gt; tagList = tagService.selectUserTagList(<span class=\"keyword\">this</span>.userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResponse&lt;List&lt;Tag&gt;&gt;(tagList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在Headers中没有传入token：调用失败</p>\n<p><img src=\"image-20201209195709567.png\" alt=\"image-20201209195709567\"></p>\n<p>传入token之后：调用成功</p>\n<p><img src=\"image-20201209195746076.png\" alt=\"image-20201209195746076\"></p>\n<p>#### </p>\n<h2 id=\"七、结语\"><a href=\"#七、结语\" class=\"headerlink\" title=\"七、结语\"></a>七、结语</h2><p>至此、我们已经了解JWT的原理、jjwt库的使用以及项目中的应用。赶紧自己去实验一下吧。</p>\n<p>以上所展示的源码地址：<a href=\"https://github.com/shelimingming/time_manage/tree/main/time_manage_backend\" target=\"_blank\" rel=\"noopener\">https://github.com/shelimingming/time_manage/tree/main/time_manage_backend</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、JWT是什么\"><a href=\"#一、JWT是什么\" class=\"headerlink\" title=\"一、JWT是什么\"></a>一、JWT是什么</h2><p>JWT全称Json Web Token，它是一个开放的标准，它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。 由于此信息是经过数字签名的，因此可以被验证和信任。</p>\n<p>这是官网（<a href=\"https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。\" target=\"_blank\" rel=\"noopener\">https://jwt.io/introduction/）对JWT的定义，个人简单的理解：JWT定义了一系列的算法将需要传输的数据进行加密生成一个token（令牌，也就是一个字符串），只要你有密钥就可以在任何地方验证token的合法性并取出token中的数据。</a></p>\n<h2 id=\"二、JWT产生的原因\"><a href=\"#二、JWT产生的原因\" class=\"headerlink\" title=\"二、JWT产生的原因\"></a>二、JWT产生的原因</h2><h3 id=\"传统的session认证：\"><a href=\"#传统的session认证：\" class=\"headerlink\" title=\"传统的session认证：\"></a>传统的session认证：</h3><p>我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。</p>\n<p>传统的Session认证有一个明显的弊端，就是服务端需要存储所有用户的登录信息，这样当用户量非常大的时候服务端的压力就会很大（当然也有一系列的分布式session的方案）。所以就有一种基于token的鉴权机制被发明：</p>\n<h3 id=\"基于token的鉴权机制：\"><a href=\"#基于token的鉴权机制：\" class=\"headerlink\" title=\"基于token的鉴权机制：\"></a>基于token的鉴权机制：</h3><p>首先用户向服务器发送用户名密码的鉴权信息，服务器根据JWT的规则生成一个token，这个token包含用户的信息和签名的信息，用户拿到这个token保存在本地，以后发请求的时候都带上这个token，服务端根据token可以验证token的合法性并解析出用户的信息，这样就可以识别出是哪个用户了。</p>\n<p>那么这个token怎么被生成呢？</p>\n<h2 id=\"三、JWT的结构\"><a href=\"#三、JWT的结构\" class=\"headerlink\" title=\"三、JWT的结构\"></a>三、JWT的结构</h2><p>JWT分为三个部分：header、playload、signature。</p>\n<h4 id=\"header：头部\"><a href=\"#header：头部\" class=\"headerlink\" title=\"header：头部\"></a>header：头部</h4><p>头部一般都是固定两个字段：</p>\n<p>typ：声明类型，一般JWT</p>\n<p>alg：声明加密算法，一般使用HMAC SHA256</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将这个Json字符串进行base64编码（这种加密是对称的，可以直接进行解密）构成第一部分:</p>\n<p>可以在网站上在线加密：<a href=\"https://tool.oschina.net/encrypt?type=3\" target=\"_blank\" rel=\"noopener\">https://tool.oschina.net/encrypt?type=3</a></p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI<span class=\"number\">1</span><span class=\"symbol\">NiIsInR5</span>cCI<span class=\"number\">6</span>IkpX<span class=\"attr\">VCJ9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"playload：存放有效信息的地方\"><a href=\"#playload：存放有效信息的地方\" class=\"headerlink\" title=\"playload：存放有效信息的地方\"></a>playload：存放有效信息的地方</h4><p><strong>1、标准中注册的声明 (建议但不强制使用) ：</strong></p>\n<p><code>iss</code>: jwt签发者</p>\n<p><code>sub</code>: jwt所面向的用户</p>\n<p><code>aud</code>: 接收jwt的一方</p>\n<p><code>exp</code>: jwt的过期时间，这个过期时间必须要大于签发时间</p>\n<p><code>nbf</code>: 定义在什么时间之前，该jwt都是不可用的.</p>\n<p><code>iat</code>: jwt的签发时间</p>\n<p><code>jti</code>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p>\n<p><strong>2、公共的声明 ：</strong></p>\n<p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<p><strong>3、私有的声明 ：</strong></p>\n<p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"iat\"</span>: <span class=\"number\">1516239022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将其进行base64加密，得到Jwt的第二部分:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMj<span class=\"name\">M0</span><span class=\"symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"number\">6</span>Ikpva<span class=\"name\">G4</span>gR<span class=\"name\">G9</span>lIiwiaWF<span class=\"number\">0</span>Ijox<span class=\"symbol\">NTE2</span>Mj<span class=\"name\">M5</span>MDIyfQ</span><br></pre></td></tr></table></figure>\n<h4 id=\"signature：签名信息\"><a href=\"#signature：签名信息\" class=\"headerlink\" title=\"signature：签名信息\"></a>signature：签名信息</h4><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密</p>\n<p>最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI<span class=\"number\">1</span><span class=\"symbol\">NiIsInR5</span>cCI<span class=\"number\">6</span>IkpX<span class=\"attr\">VCJ9</span>.eyJzdWIiOiIxMj<span class=\"name\">M0</span><span class=\"symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"number\">6</span>Ikpva<span class=\"name\">G4</span>gR<span class=\"name\">G9</span>lIiwiaWF<span class=\"number\">0</span>Ijox<span class=\"symbol\">NTE2</span>Mj<span class=\"name\">M5</span>MDIyfQ.SflKxwRJSMeKKF<span class=\"number\">2</span>QT<span class=\"number\">4</span>fwpMeJf<span class=\"number\">36</span>POk<span class=\"number\">6</span>yJV_adQssw<span class=\"number\">5</span>c</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、Java实现JWT\"><a href=\"#四、Java实现JWT\" class=\"headerlink\" title=\"四、Java实现JWT\"></a>四、Java实现JWT</h2><p>基于以上原理，我们调用一些jdk自带的包，就可以基于以上规则生成JWT的token。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mj.time.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Mac;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.InvalidKeyException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">Hmacsha256</span><span class=\"params\">(String secret, String message)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        Mac hmac_sha256 = Mac.getInstance(<span class=\"string\">\"HMacSHA256\"</span>);</span><br><span class=\"line\">        SecretKeySpec key = <span class=\"keyword\">new</span> SecretKeySpec(secret.getBytes(), <span class=\"string\">\"HMacSHA256\"</span>);</span><br><span class=\"line\">        hmac_sha256.init(key);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buff = hmac_sha256.doFinal(message.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.encodeBase64URLSafeString(buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InvalidKeyException, NoSuchAlgorithmException </span>&#123;</span><br><span class=\"line\">        String secret = <span class=\"string\">\"secret123\"</span>;</span><br><span class=\"line\">        String header = <span class=\"string\">\"&#123;\\\"type\\\":\\\"JWT\\\",\\\"alg\\\":\\\"HS256\\\"&#125;\"</span>;</span><br><span class=\"line\">        String claim = <span class=\"string\">\"&#123;\\\"sub\\\": \\\"1234567890\\\",\\\"name\\\": \\\"John Doe\\\",\\\"iat\\\":1516239022&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String base64Header = Base64.encodeBase64URLSafeString(header.getBytes());</span><br><span class=\"line\">        String base64Claim = Base64.encodeBase64URLSafeString(claim.getBytes());</span><br><span class=\"line\">        String signature = Hmacsha256(secret, base64Header + <span class=\"string\">\".\"</span> + base64Claim);</span><br><span class=\"line\"></span><br><span class=\"line\">        String jwt = base64Header + <span class=\"string\">\".\"</span> + base64Claim  + <span class=\"string\">\".\"</span> + signature;</span><br><span class=\"line\">        System.out.println(jwt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>明显这样生成token非常麻烦，很容器出错，所以就有一系列的第三方库支持，各种语言都有。可以看官网上列的：<a href=\"https://jwt.io/#libraries-io\" target=\"_blank\" rel=\"noopener\">https://jwt.io/#libraries-io</a></p>\n<h2 id=\"五、开源库-jjwt-实现-JWT\"><a href=\"#五、开源库-jjwt-实现-JWT\" class=\"headerlink\" title=\"五、开源库 jjwt 实现 JWT\"></a>五、开源库 jjwt 实现 JWT</h2><p>jjwt是目前使用比较多，支持加密算法比较多的Java库。github有7000+star。比官方的库java-jwt的3000+star多了一倍多。所以我们使用jjwt作为我们的例子：</p>\n<p>源码的github地址：<a href=\"https://github.com/jwtk/jjwt\" target=\"_blank\" rel=\"noopener\">https://github.com/jwtk/jjwt</a></p>\n<h3 id=\"1、基本使用\"><a href=\"#1、基本使用\" class=\"headerlink\" title=\"1、基本使用\"></a>1、基本使用</h3><p><strong>1、引入pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt-jackson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、生成JWTtoken</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);</span><br><span class=\"line\">String jws = Jwts.builder().setSubject(<span class=\"string\">\"Joe\"</span>).signWith(key).compact();</span><br></pre></td></tr></table></figure>\n<p>执行后生成的jws为：</p>\n<p><code>eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.jObJ_3Y_mXHg2vlyvYQQH3RRZlwZvtrvoZnKts3Aq58</code></p>\n<p>哈哈，只要两行代码，创建一个token。这个token使用HMAC-SHA-256进行签名，并设定了标准中注册的声明<code>sub</code>的值为<code>Joe</code></p>\n<p><strong>3、校验token及获取内容</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tString subject = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jws).getBody().getSubject();</span><br><span class=\"line\">  \t<span class=\"comment\">//token合法，进行后续操作</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JwtException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//token不可信</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入的token是合法的，subject就可以拿到之前放入的<code>Joe</code>。如果token被修改或者失效，就会抛出JwtException。</p>\n<h3 id=\"2、签名算法及密钥介绍\"><a href=\"#2、签名算法及密钥介绍\" class=\"headerlink\" title=\"2、签名算法及密钥介绍\"></a>2、签名算法及密钥介绍</h3><p>在介绍jjwt详细使用之前，我们先介绍一下和jwt相关的签名算法和密钥，了解它们对正确创建jwt至关重要。</p>\n<p>JWT规范标识了12种标准签名算法-3种密钥算法和9种非对称密钥算法：</p>\n<ul>\n<li><code>HS256</code>: HMAC using SHA-256</li>\n<li><code>HS384</code>: HMAC using SHA-384</li>\n<li><code>HS512</code>: HMAC using SHA-512</li>\n<li><code>ES256</code>: ECDSA using P-256 and SHA-256</li>\n<li><code>ES384</code>: ECDSA using P-384 and SHA-384</li>\n<li><code>ES512</code>: ECDSA using P-521 and SHA-512</li>\n<li><code>RS256</code>: RSASSA-PKCS-v1_5 using SHA-256</li>\n<li><code>RS384</code>: RSASSA-PKCS-v1_5 using SHA-384</li>\n<li><code>RS512</code>: RSASSA-PKCS-v1_5 using SHA-512</li>\n<li><code>PS256</code>: RSASSA-PSS using SHA-256 and MGF1 with SHA-256</li>\n<li><code>PS384</code>: RSASSA-PSS using SHA-384 and MGF1 with SHA-384</li>\n<li><code>PS512</code>: RSASSA-PSS using SHA-512 and MGF1 with SHA-512</li>\n</ul>\n<p>这些算法其实对我们程序员来说并不重要，我们只要选择合适的算法即可。但是我们需要注意一下密钥的选择。JWT规范中要求必须使用对于所选算法足够强的密钥。所以jjwt还将强制你为选择的算法使用足够强大的密钥。 如果为给定算法提供弱密钥，JJWT将拒绝它并抛出异常。</p>\n<p>当然jjwt为了让你能不需要了解算法就可以生成合法的密钥，jjwt提供了工具类<code>io.jsonwebtoken.security.Keys</code>。我们可以使用这个工具类生成对应算法的正确最小长度的安全随机密钥，然后保存起来，后面就可以当作加密的密钥了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); <span class=\"comment\">//or HS384 or HS512</span></span><br><span class=\"line\">String secretString = Encoders.BASE64.encode(key.getEncoded());</span><br></pre></td></tr></table></figure>\n<p>还支持非对称加密的公私钥生成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KeyPair keyPair = Keys.keyPairFor(SignatureAlgorithm.RS256); </span><br><span class=\"line\"><span class=\"comment\">//or RS384, RS512, PS256, PS384, PS512, ES256, ES384, ES512</span></span><br><span class=\"line\">keyPair.getPrivate()<span class=\"comment\">//私钥</span></span><br><span class=\"line\">keyPair.getPublic()<span class=\"comment\">//公钥</span></span><br></pre></td></tr></table></figure>\n<p>可以使用私钥创建一个JWS，并使用公钥来解析/验证JWS。</p>\n<h3 id=\"3、详细使用\"><a href=\"#3、详细使用\" class=\"headerlink\" title=\"3、详细使用\"></a>3、详细使用</h3><p>创建一个JWS分为以下4个步骤：</p>\n<p>1、使用Jwts.builder（）方法创建JwtBuilder实例。</p>\n<p>2、调用JwtBuilder方法以根据需要添加标头参数和声明。</p>\n<p>3、指定要用于对JWT签名的SecretKey或非对称PrivateKey。 </p>\n<p>4、最后，调用compact（）方法进行压缩和签名，生成最终的jws。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder() <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    .setSubject(<span class=\"string\">\"Bob\"</span>)      <span class=\"comment\">// (2) </span></span><br><span class=\"line\">    .signWith(key)          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    .compact();             <span class=\"comment\">// (4)</span></span><br></pre></td></tr></table></figure>\n<p>下面针对每一个可以扩展的点进行详细说明：</p>\n<h4 id=\"Header-Parameters\"><a href=\"#Header-Parameters\" class=\"headerlink\" title=\"Header Parameters\"></a>Header Parameters</h4><p>JWT的header提供内容、格式、加密算法的元数据，如果想增加header的数据，可以调用<code>JwtBuilder</code> 的<code>setHeaderParam</code>方法一次或多次来添加Header：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .setHeaderParam(<span class=\"string\">\"kid\"</span>, <span class=\"string\">\"myKeyId\"</span>)</span><br><span class=\"line\">    .setHeaderParam(<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Claims\"><a href=\"#Claims\" class=\"headerlink\" title=\"Claims\"></a>Claims</h4><p>Claims是JWT的主体，并包含JWT创建者希望提供给JWT接收者的信息。</p>\n<p>JWT提供了一些标准的Claims：jjwt都提供了标准的方法设置：</p>\n<ul>\n<li><code>setIssuer</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.1\" target=\"_blank\" rel=\"noopener\"><code>iss</code> (Issuer) Claim</a></li>\n<li><code>setSubject</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.2\" target=\"_blank\" rel=\"noopener\"><code>sub</code> (Subject) Claim</a></li>\n<li><code>setAudience</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.3\" target=\"_blank\" rel=\"noopener\"><code>aud</code> (Audience) Claim</a></li>\n<li><code>setExpiration</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.4\" target=\"_blank\" rel=\"noopener\"><code>exp</code> (Expiration Time) Claim</a></li>\n<li><code>setNotBefore</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.5\" target=\"_blank\" rel=\"noopener\"><code>nbf</code> (Not Before) Claim</a></li>\n<li><code>setIssuedAt</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.6\" target=\"_blank\" rel=\"noopener\"><code>iat</code> (Issued At) Claim</a></li>\n<li><code>setId</code>: sets the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.7\" target=\"_blank\" rel=\"noopener\"><code>jti</code> (JWT ID) Claim</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .setIssuer(<span class=\"string\">\"me\"</span>)</span><br><span class=\"line\">    .setSubject(<span class=\"string\">\"Bob\"</span>)</span><br><span class=\"line\">    .setAudience(<span class=\"string\">\"you\"</span>)</span><br><span class=\"line\">    .setExpiration(expiration) <span class=\"comment\">//a java.util.Date</span></span><br><span class=\"line\">    .setNotBefore(notBefore) <span class=\"comment\">//a java.util.Date </span></span><br><span class=\"line\">    .setIssuedAt(<span class=\"keyword\">new</span> Date()) <span class=\"comment\">// for example, now</span></span><br><span class=\"line\">    .setId(UUID.randomUUID()) <span class=\"comment\">//just an example id</span></span><br><span class=\"line\">    <span class=\"comment\">/// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<p>使用自定义的Claims：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\">    .claim(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... etc ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Signing-Key\"><a href=\"#Signing-Key\" class=\"headerlink\" title=\"Signing Key\"></a>Signing Key</h4><p>建议使用 <code>JwtBuilder</code>的<code>signWith</code>方法设置密钥，因为当你的密钥长度不满足算法的要求的时候，jjwt会自动给你改成对密钥长度要求低的加密算法。并且该方法还会给你设置header中的加密算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String secretString = <span class=\"string\">\"XXXXXXXXXX\"</span>;</span><br><span class=\"line\">SecretKey secretKey = Keys.hmacShaKeyFor(secretString.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">String jws = Jwts.builder()</span><br><span class=\"line\"></span><br><span class=\"line\">   .signWith(secretKey) <span class=\"comment\">// &lt;---</span></span><br><span class=\"line\">   .compact();</span><br></pre></td></tr></table></figure>\n<h4 id=\"解析JWS\"><a href=\"#解析JWS\" class=\"headerlink\" title=\"解析JWS\"></a>解析JWS</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jws&lt;Claims&gt; jws;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    jws = Jwts.parserBuilder()  <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    .setSigningKey(key)         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    .build()                    <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    .parseClaimsJws(jwsString); <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// we can safely trust the JWT</span></span><br><span class=\"line\">     </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;       <span class=\"comment\">// (5)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// we *cannot* use the JWT as intended by its creator</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、Springboot项目实战源码\"><a href=\"#六、Springboot项目实战源码\" class=\"headerlink\" title=\"六、Springboot项目实战源码\"></a>六、Springboot项目实战源码</h2><p>项目实战就是将第二节中的“基于token的鉴权机制”，使用Java代码实现。</p>\n<h4 id=\"1、封装工具类\"><a href=\"#1、封装工具类\" class=\"headerlink\" title=\"1、封装工具类\"></a>1、封装工具类</h4><p>封装JwtTokenUtils，主要包括生成token、校验token和解析token三个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.io.Encoders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.security.Keys;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.SecretKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JwtTokenUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 秘钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;jwt.secret:52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secret;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有效期，单位秒</span></span><br><span class=\"line\"><span class=\"comment\">     * - 默认2周</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;jwt.expire-time-in-second:1209600&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long expirationTimeInSecond;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为指定用户生成token</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> claims 用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createToken</span><span class=\"params\">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</span><br><span class=\"line\">        Date createdTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        Date expirationTime = <span class=\"keyword\">this</span>.getExpirationTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        String token = Jwts.builder()</span><br><span class=\"line\">                .setClaims(claims)               <span class=\"comment\">//设置自定义属性</span></span><br><span class=\"line\">                .setIssuedAt(createdTime)        <span class=\"comment\">//设置token创建时间</span></span><br><span class=\"line\">                .setExpiration(expirationTime)   <span class=\"comment\">//设置token过期时间</span></span><br><span class=\"line\">                .signWith(key, SignatureAlgorithm.HS256)  <span class=\"comment\">//// 支持的算法详见：https://github.com/jwtk/jjwt#features</span></span><br><span class=\"line\">                .compact();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 校验token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">verifyToken</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = Jwts.parserBuilder()</span><br><span class=\"line\">                    .setSigningKey(key)</span><br><span class=\"line\">                    .build()</span><br><span class=\"line\">                    .parseClaimsJws(token);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"token:&#123;&#125;,验证失败\"</span>, token, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从token中获取claim</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> claim</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Claims <span class=\"title\">getClaimsFromToken</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] keyBytes = secret.getBytes();</span><br><span class=\"line\">        SecretKey key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = Jwts.parserBuilder()</span><br><span class=\"line\">                    .setSigningKey(key)</span><br><span class=\"line\">                    .build()</span><br><span class=\"line\">                    .parseClaimsJws(token);</span><br><span class=\"line\">            Claims claims = jws.getBody();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> claims;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JwtException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"token:&#123;&#125;,验证失败\"</span>, token, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"token验证失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成随机合法密钥，然后手动保存到配置文件。密钥千万不能泄漏！！！</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">generateSecretString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256); <span class=\"comment\">//or HS384 or HS512</span></span><br><span class=\"line\">        String secretString = Encoders.BASE64.encode(key.getEncoded());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> secretString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> JwtTokenUtils().generateSecretString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算token的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Date <span class=\"title\">getExpirationTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(System.currentTimeMillis() + <span class=\"keyword\">this</span>.expirationTimeInSecond * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>springboot配置文件中增加以下配置，没有配置的话会使用默认值：其中密钥可以用generateSecretString方法生成一个随机合法密钥。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jwt:</span></span><br><span class=\"line\">  <span class=\"attr\">secret:</span> <span class=\"string\">52GLLfnJ30xJ0qCBgPMVUOatf4BUJvGMejJzXD418HQ=</span></span><br><span class=\"line\">  <span class=\"attr\">expire-time-in-second:</span> <span class=\"number\">1209600</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、增加NoNeedToken注解\"><a href=\"#2、增加NoNeedToken注解\" class=\"headerlink\" title=\"2、增加NoNeedToken注解\"></a>2、增加NoNeedToken注解</h4><p>默认所有接口都需要校验token，@NoNeedToken注解用来表示接口不需要校验token，例如登录接口和一些公共接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;) <span class=\"comment\">//注解的范围是类、接口、枚举的方法上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">//被虚拟机保存，可用反射机制读取</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NoNeedToken &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、配置过滤器\"><a href=\"#3、配置过滤器\" class=\"headerlink\" title=\"3、配置过滤器\"></a>3、配置过滤器</h4><p>编写token校验过滤器，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.annotation.NoNeedToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.ErrorCodeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.util.JwtTokenUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtTokenUtils jwtTokenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置返回值属性</span></span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json; charset=utf-8\"</span>);</span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        PrintWriter out;</span><br><span class=\"line\">        <span class=\"comment\">// 对于注解的判断</span></span><br><span class=\"line\">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlerMethod.getMethodAnnotation(NoNeedToken<span class=\"class\">.<span class=\"keyword\">class</span>) !</span>= <span class=\"keyword\">null</span> || handlerMethod.getBeanType().isAnnotationPresent(NoNeedToken<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果方法拥有NoNeedToken标注或者所属的类拥有NoNeedToken 就直接放行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class=\"line\">            JSONObject res = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            res.put(<span class=\"string\">\"code\"</span>, ErrorCodeEnum.TOKEN_ERROR.getCode());</span><br><span class=\"line\">            res.put(<span class=\"string\">\"message\"</span>, ErrorCodeEnum.TOKEN_ERROR.getMsg());</span><br><span class=\"line\">            out = response.getWriter();</span><br><span class=\"line\">            out.append(res.toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Claims claims = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            claims = jwtTokenUtils.getClaimsFromToken(token);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignored) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解析token失败</span></span><br><span class=\"line\">            JSONObject res = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            res.put(<span class=\"string\">\"code\"</span>, ErrorCodeEnum.TOKEN_ERROR.getCode());</span><br><span class=\"line\">            res.put(<span class=\"string\">\"message\"</span>, ErrorCodeEnum.TOKEN_ERROR.getMsg());</span><br><span class=\"line\">            out = response.getWriter();</span><br><span class=\"line\">            out.append(res.toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将token中解析出来的信息放入attribute中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (claims != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"user_claims\"</span>, claims);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置过滤器，默认将所有的请求拦截：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.intercepter.TokenInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span>  <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    TokenInterceptor tokenInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置所有的路径都要进行拦截</span></span><br><span class=\"line\">        registry.addInterceptor(tokenInterceptor).addPathPatterns(<span class=\"string\">\"/**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、编写BaseController\"><a href=\"#4、编写BaseController\" class=\"headerlink\" title=\"4、编写BaseController\"></a>4、编写BaseController</h4><p>所有的contoller需要继承BaseController，BaseController主要解析Attribute中的user_claims获取用户信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.Constants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HttpServletResponse response;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Integer userId;  <span class=\"comment\">// 用户id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String authType; <span class=\"comment\">// 登录类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parseClaims</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.response = response;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到在拦截器里设置的 user_claims， 并将其保存到类的成员变量中</span></span><br><span class=\"line\">        Claims userClaims = (Claims) request.getAttribute(<span class=\"string\">\"user_claims\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userClaims != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userId = (Integer) userClaims.get(Constants.CLAIMS_USER_ID);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.authType = (String) userClaims.get(Constants.CLAIMS_AUTH_TYPE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、登录接口\"><a href=\"#5、登录接口\" class=\"headerlink\" title=\"5、登录接口\"></a>5、登录接口</h4><p>登录接口加上@NoNeedToken注解，因为登录的时候还没有token，调用登录接口获取token。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.annotation.NoNeedToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.common.CommonResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.service.AuthService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mj.time.service.dto.AuthLoginDto;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/time/auth\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@NoNeedToken</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthService authService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CommonResponse&lt;AuthLoginDto&gt; <span class=\"title\">login</span><span class=\"params\">(@RequestBody AuthLoginDto authLoginDto)</span> </span>&#123;</span><br><span class=\"line\">        AuthLoginDto authLoginDtoResp = authService.login(authLoginDto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResponse&lt;AuthLoginDto&gt;(authLoginDtoResp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现就是先去数据库判断用户名密码对不对，如果正确使用userId去创建一个token放入返回中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AuthLoginDto <span class=\"title\">login</span><span class=\"params\">(AuthLoginDto authLoginDto)</span> </span>&#123;</span><br><span class=\"line\">  User user = userMapper.selectByUserNameOrMobile(authLoginDto.getUserNameOrMobile());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || !user.getPassword().equals(authLoginDto.getPassword())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(ErrorCodeEnum.USERNAME_OR_PASSWORD_ERROR);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    authLoginDto.setUserInfo(user);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    claims.put(Constants.CLAIMS_USER_ID, user.getId());</span><br><span class=\"line\">    claims.put(Constants.CLAIMS_AUTH_TYPE, AuthTypeEnum.PASSWORD.getValue());</span><br><span class=\"line\">    String token = jwtTokenUtils.createToken(claims);</span><br><span class=\"line\">    authLoginDto.setToken(token);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> authLoginDto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用结果：我们可以获取到一个token</p>\n<p><img src=\"image-20201209195520846.png\" alt=\"image-20201209195520846\"></p>\n<h4 id=\"6、需要鉴权接口\"><a href=\"#6、需要鉴权接口\" class=\"headerlink\" title=\"6、需要鉴权接口\"></a>6、需要鉴权接口</h4><p>无需任何改变，默认所有接口都需要鉴权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/time/tag\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TagService tagService;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    CommonResponse&lt;List&lt;Tag&gt;&gt; getAllMenu() &#123;</span><br><span class=\"line\">        List&lt;Tag&gt; tagList = tagService.selectUserTagList(<span class=\"keyword\">this</span>.userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResponse&lt;List&lt;Tag&gt;&gt;(tagList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在Headers中没有传入token：调用失败</p>\n<p><img src=\"image-20201209195709567.png\" alt=\"image-20201209195709567\"></p>\n<p>传入token之后：调用成功</p>\n<p><img src=\"image-20201209195746076.png\" alt=\"image-20201209195746076\"></p>\n<p>#### </p>\n<h2 id=\"七、结语\"><a href=\"#七、结语\" class=\"headerlink\" title=\"七、结语\"></a>七、结语</h2><p>至此、我们已经了解JWT的原理、jjwt库的使用以及项目中的应用。赶紧自己去实验一下吧。</p>\n<p>以上所展示的源码地址：<a href=\"https://github.com/shelimingming/time_manage/tree/main/time_manage_backend\" target=\"_blank\" rel=\"noopener\">https://github.com/shelimingming/time_manage/tree/main/time_manage_backend</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/JWT/image-20201209195520846.png","post":"ckihmq1xa0004sy5nnsoygw23","slug":"image-20201209195520846.png","modified":1,"renderable":1},{"_id":"source/_posts/JWT/image-20201209195709567.png","post":"ckihmq1xa0004sy5nnsoygw23","slug":"image-20201209195709567.png","modified":1,"renderable":1},{"_id":"source/_posts/JWT/image-20201209195746076.png","post":"ckihmq1xa0004sy5nnsoygw23","slug":"image-20201209195746076.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckihmq1xa0004sy5nnsoygw23","tag_id":"ckihmq1xf0005sy5nbfw6xfx3","_id":"ckihmq1xh0007sy5n8p0ydab6"},{"post_id":"ckihmq1xa0004sy5nnsoygw23","tag_id":"ckihmq1xh0006sy5nvv6oijsq","_id":"ckihmq1xh0008sy5n71qy849v"}],"Tag":[{"name":"SSO","_id":"ckihmq1xf0005sy5nbfw6xfx3"},{"name":"微信小程序","_id":"ckihmq1xh0006sy5nvv6oijsq"}]}}